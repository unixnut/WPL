<?php

# TO-DO: add comments to list with SQLSTATE ids and symbols from
#        https://dev.mysql.com/doc/refman/8.0/en/server-error-reference.html
# TO-DO:

namespace WPL\MySQL;

class MySqlErrorCode extends \WPL\BasicEnum
{
    const None                     = 0;
    const HashCheck                = 1000; //
    const ISAMCheck                = 1001; //
    const No = 1002; //
    const Yes                      = 1003; //
    const CannotCreateFile         = 1004; //                    The file couldn't be created.
    const CannotCreateTable        = 1005; //                    The table couldn't be created.
    const CannotCreateDatabase     = 1006; //                    The database couldn't be created.
    const DatabaseCreateExists     = 1007; //                    The database couldn't be created, it already exists.
    const DatabaseDropExists       = 1008; //                    The database couldn't be dropped, it doesn't exist.
    const DatabaseDropDelete       = 1009; //                    The database couldn't be dropped, the file can't be deleted.
    const DatabaseDropRemoveDir    = 1010; //                    The database couldn't be dropped, the directory can't be deleted.
    const CannotDeleteFile         = 1011; //                    The file couldn't be deleted.
    const CannotFindSystemRecord   = 1012; //                    The record couldn't be read from the system table.
    const CannotGetStatus          = 1013; // The status couldn't be retrieved.
    const CannotGetWorkingDirectory = 1014; // The working directory couldn't be retrieved.
    const CannotLock               = 1015; // The file couldn't be locked.
    const CannotOpenFile           = 1016; // The file couldn't be opened.
    const FileNotFound             = 1017; // The file couldn't be found.
    const CannotReadDirectory      = 1018; // The directory couldn't be read.
    const CannotSetWorkingDirectory = 1019; // The working directory couldn't be entered.
    const CheckRead                = 1020; // The record changed since it was last read.
    const DiskFull                 = 1021; // The disk is full.
    const DuplicateKey             = 1022; // There is already a key with the given values.
    const ErrorOnClose             = 1023; // An error occurred when closing the file.
    const ErrorOnRead              = 1024; // An error occurred when reading from the file.
    const ErrorOnRename            = 1025; // An error occurred when renaming then file.
    const ErrorOnWrite             = 1026; // An error occurred when writing to the file.
    const FileUsed                 = 1027; // The file is in use.
    const FileSortAborted          = 1028; // Sorting has been aborted.
    const FormNotFound             = 1029; // The view doesn't exist.
    const GetErrorNumber           = 1030; // Got the specified error from the table storage engine.
    const IllegalHA                = 1031; // The table storage engine doesn't support the specified option.
    const KeyNotFound              = 1032; // The specified key was not found.
    const NotFormFile              = 1033; // The file contains incorrect information.
    const NotKeyFile               = 1034; // The key file is incorrect for the table, it should be repaired.
    const OldKeyFile               = 1035; // The key file is old for the table, it should be repaired.
    const OpenAsReadOnly           = 1036; // The table is read-only
    const OutOfMemory              = 1037; // The server is out of memory, it should be restarted.
    const OutOfSortMemory          = 1038; // The server is out of sort-memory, the sort buffer size should be increased.
    const UnexepectedEOF           = 1039; // An unexpected EOF was found when reading from the file.
    const ConnectionCountError     = 1040; // Too many connections are open.
    const OutOfResources           = 1041; // The server is out of resources, check if MySql or some other process is using all available memory.
    const UnableToConnectToHost    = 1042; // Given when the connection is unable to successfully connect to host.
    const HandshakeError           = 1043; // The handshake was invalid.
    const DatabaseAccessDenied     = 1044; // Access was denied for the specified user using the specified database.
    const AccessDenied             = 1045; // Normally returned when an incorrect password is given
    const NoDatabaseSelected       = 1046; // No database has been selected.
    const UnknownCommand           = 1047; // The command is unknown.
    const ColumnCannotBeNull       = 1048; // The specified column cannot be NULL.
    const UnknownDatabase          = 1049; // The specified database is not known.
    const TableExists              = 1050; // The specified table already exists.
    const BadTable                 = 1051; // The specified table is unknown.
    const NonUnique                = 1052; // The specified column is ambiguous.
    const ServerShutdown           = 1053; // The server is currently being shutdown.
    const BadFieldError            = 1054; // The specified columns is unknown.
    const WrongFieldWithGroup      = 1055; // The specified column isn't in GROUP BY.
    const WrongGroupField          = 1056; // The specified columns cannot be grouped on.
    const WrongSumSelected         = 1057; // There are sum functions and columns in the same statement.
    const WrongValueCount          = 1058; // The column count doesn't match the value count.
    const TooLongIdentifier        = 1059; // The identifier name is too long.
    const DuplicateFieldName       = 1060; // The column name is duplicated.
    const DuplicateKeyName         = 1061; // Duplicate Key Name
    const DuplicateKeyEntry        = 1062; // Duplicate Key Entry
    const WrongFieldSpecifier      = 1063; // The column specifier is incorrect.
    const ParseError               = 1064; // An error occurred when parsing the statement.
    const EmptyQuery               = 1065; // The statement is empty.
    const NonUniqueTable           = 1066; // The table alias isn't unique.
    const InvalidDefault           = 1067; // The default value is invalid for the specified field.
    const MultiplePrimaryKey       = 1068; // The table has multiple primary keys defined.
    const TooManyKeys              = 1069; // Too many keys were defined for the table.
    const TooManyKeysParts         = 1070; // Too many parts to the keys were defined for the table.
    const TooLongKey               = 1071; // The specified key is too long
    const KeyColumnDoesNotExist    = 1072; // The specified key column doesn't exist in the table.
    const BlobUsedAsKey            = 1073; // The BLOB column was used as a key, this can't be done.
    const TooBigFieldLength        = 1074; // The column length is too big for the specified column type.
    const WrongAutoKey             = 1075; // There can only be one auto-column, and it must be defined as a PK.
    const Ready                    = 1076; // The server is ready to accept connections.
    const NormalShutdown           = 1077; //
    const GotSignal                = 1078; // The server received the specified signal and is aborting.
    const ShutdownComplete         = 1079; // The server shutdown is complete.
    const ForcingClose             = 1080; // The server is forcing close of the specified thread.
    const IPSocketError            = 1081; // An error occurred when creating the IP socket.
    const NoSuchIndex              = 1082; // The table has no index like the one used in CREATE INDEX.
    const WrongFieldTerminators    = 1083; // The field separator argument is not what is expected, check the manual.
    const BlobsAndNoTerminated     = 1084; // The BLOB columns must terminated, fixed row lengths cannot be used.
    const TextFileNotReadable      = 1085; // The text file cannot be read.
    const FileExists               = 1086; // The specified file already exists.
    const LoadInfo                 = 1087; // Information returned by the LOAD statement.
    const AlterInfo                = 1088; // Information returned by an UPDATE statement.
    const WrongSubKey              = 1089; // The prefix key is incorrect.
    const CannotRemoveAllFields    = 1090; // All columns cannot be removed from a table, use DROP TABLE instead.
    const CannotDropFieldOrKey     = 1091; // Cannot DROP, check that the column or key exists.
    const InsertInfo               = 1092; // Information returned by an INSERT statement.
    const UpdateTableUsed          = 1093; // The target table cannot be specified for update in FROM clause.
    const NoSuchThread             = 1094; // The specified thread ID is unknown.
    const KillDenied               = 1095; // The thread cannot be killed, the current user is not the owner.
    const NoTablesUsed             = 1096; // No tables used in the statement.
    const TooBigSet                = 1097; // Too many string have been used for the specified column and SET.
    const NoUniqueLogFile          = 1098; // A unique filename couldn't be generated.
    const TableNotLockedForWrite   = 1099; // The specified table was locked with a READ lock, and can't be updated.
    const TableNotLocked           = 1100; // The specified table was not locked with LOCK TABLES.
    const BlobCannotHaveDefault    = 1101; // BLOB and Text columns cannot have a default value.
    const WrongDatabaseName        = 1102; // The specified database name is incorrect.
    const WrongTableName           = 1103; // The specified table name is incorrect.
    const TooBigSelect             = 1104; // The SELECT command would examine more than MAX_JOIN_SIZE rows, check the WHERE clause and use SET SQL_BIG_SELECTS=1 or SET SQL_MAX_JOIN_SIZE=# if the SELECT is ok.
    const UnknownError             = 1105; // An unknown error occurred.
    const UnknownProcedure         = 1106; // The specified procedure is unknown.
    const WrongParameterCountToProcedure = 1107; // The number of parameters provided for the specified procedure is incorrect.
    const WrongParametersToProcedure = 1108; // The parameters provided for the specified procedure are incorrect.
    const UnknownTable             = 1109; // The specified table is unknown.
    const FieldSpecifiedTwice      = 1110; // The specified column has been specified twice.
    const InvalidGroupFunctionUse  = 1111; // The group function has been incorrectly used.
    const UnsupportedExtenstion    = 1112; // The specified table uses an extension that doesn't exist in this MySQL version.
    const TableMustHaveColumns     = 1113; // The table must have at least one column.
    const RecordFileFull           = 1114; // The specified table is full.
    const UnknownCharacterSet      = 1115; // The specified character set is unknown.
    const TooManyTables            = 1116; // Too many tables, MySQL can only use the specified number of tables in a JOIN.
    const TooManyFields            = 1117; // Too many columns
    const TooBigRowSize            = 1118; // The row size is too large, the maximum row size for the used tables (not counting BLOBS) is specified, change some columns or BLOBS.
    const StackOverrun             = 1119; // A thread stack overrun occurred. Stack statistics are specified.
    const WrongOuterJoin           = 1120; // A cross dependency was found in the OUTER JOIN, examine the ON conditions.
    const NullColumnInIndex        = 1121; // The table handler doesn't support NULL in the given index, change specified column to be NOT NULL or use another handler.
    const CannotFindUDF            = 1122; // The specified user defined function cannot be loaded.
    const CannotInitializeUDF      = 1123; // The specified user defined function cannot be initialised.
    const UDFNoPaths               = 1124; // No paths are allowed for the shared library.
    const UDFExists                = 1125; // The specified user defined function already exists.
    const CannotOpenLibrary        = 1126; // The specified shared library cannot be opened.
    const CannotFindDLEntry        = 1127; // The specified symbol cannot be found in the library.
    const FunctionNotDefined       = 1128; // The specified function is not defined.
    const HostIsBlocked            = 1129; // The specified host is blocked because of too many connection errors, unblock with 'mysqladmin flush-hosts'.
    const HostNotPrivileged        = 1130; // The given host is not allowed to connect
    const AnonymousUser            = 1131; // The anonymous user is not allowed to connect
    const PasswordNotAllowed       = 1132; // The given password is not allowed
    const PasswordNoMatch          = 1133; // The given password does not match
    const UpdateInfo               = 1134; // Information returned by an UPDATE statement.
    const CannotCreateThread       = 1135; // A new thread couldn't be created.
    const WrongValueCountOnRow     = 1136; // The column count doesn't match the value count.
    const CannotReopenTable        = 1137; // The specified table can't be re-opened.
    const InvalidUseOfNull         = 1138; // The NULL value has been used incorrectly.
    const RegExpError              = 1139; // The regular expression contains an error.
    const MixOfGroupFunctionAndFields = 1140; // GROUP columns (MIN(), MAX(), COUNT(), ...) cannot be mixes with no GROUP columns if there is not GROUP BY clause.
    const NonExistingGrant         = 1141; //
    const TableAccessDenied        = 1142; //
    const ColumnAccessDenied       = 1143; //
    const IllegalGrantForTable     = 1144; //
    const GrantWrongHostOrUser     = 1145; //
    const NoSuchTable              = 1146; //
    const NonExistingTableGrant    = 1147; //
    const NotAllowedCommand        = 1148; //
    const SyntaxError              = 1149; //
    const DelayedCannotChangeLock  = 1150; //
    const TooManyDelayedThreads    = 1151; //
    const AbortingConnection       = 1152; //
    const PacketTooLarge           = 1153; //                    An attempt was made to send or receive a packet larger than max_allowed_packet_size
    const NetReadErrorFromPipe     = 1154; //
    const NetFCntlError            = 1155; //
    const NetPacketsOutOfOrder     = 1156; //
    const NetUncompressError       = 1157; //
    const NetReadError             = 1158; //
    const NetReadInterrupted       = 1159; //
    const NetErrorOnWrite          = 1160; //
    const NetWriteInterrupted      = 1161; //
    const TooLongString            = 1162; //
    const TableCannotHandleBlob    = 1163; //
    const TableCannotHandleAutoIncrement                   = 1164; //
    const DelayedInsertTableLocked = 1165; //
    const WrongColumnName          = 1166; //
    const WrongKeyColumn           = 1167; //
    const WrongMergeTable          = 1168; //
    const DuplicateUnique          = 1169; //
    const BlobKeyWithoutLength     = 1170; //
    const PrimaryCannotHaveNull    = 1171; //
    const TooManyRows              = 1172; //
    const RequiresPrimaryKey       = 1173; //
    const NoRAIDCompiled           = 1174; //
    const UpdateWithoutKeysInSafeMode                      = 1175; //
    const KeyDoesNotExist          = 1176; //
    const CheckNoSuchTable         = 1177; //
    const CheckNotImplemented      = 1178; //
    const CannotDoThisDuringATransaction                   = 1179; //
    const ErrorDuringCommit        = 1180; //
    const ErrorDuringRollback      = 1181; //
    const ErrorDuringFlushLogs     = 1182; //
    const ErrorDuringCheckpoint    = 1183; //
    const NewAbortingConnection    = 1184; //
    const DumpNotImplemented       = 1185; //
    const FlushMasterBinLogClosed  = 1186; //
    const IndexRebuild             = 1187; //
    const MasterError              = 1188; //
    const MasterNetRead            = 1189; //
    const MasterNetWrite           = 1190; //
    const FullTextMatchingKeyNotFound                      = 1191; //
    const LockOrActiveTransaction  = 1192; //
    const UnknownSystemVariable    = 1193; //
    const CrashedOnUsage           = 1194; //
    const CrashedOnRepair          = 1195; //
    const WarningNotCompleteRollback = 1196; //
    const TransactionCacheFull     = 1197; //
    const SlaveMustStop            = 1198; //
    const SlaveNotRunning          = 1199; //
    const BadSlave                 = 1200; //
    const MasterInfo               = 1201; //
    const SlaveThread              = 1202; //
    const TooManyUserConnections   = 1203; //
    const SetConstantsOnly         = 1204; //
    const LockWaitTimeout          = 1205; //
    const LockTableFull            = 1206; //
    const ReadOnlyTransaction      = 1207; //
    const DropDatabaseWithReadLock = 1208; //
    const CreateDatabaseWithReadLock = 1209; //
    const WrongArguments           = 1210; //
    const NoPermissionToCreateUser = 1211; //
    const UnionTablesInDifferentDirectory                  = 1212; //
    const LockDeadlock             = 1213; //
    const TableCannotHandleFullText = 1214; //
    const CannotAddForeignConstraint = 1215; //
    const NoReferencedRow          = 1216; //
    const RowIsReferenced          = 1217; //
    const ConnectToMaster          = 1218; //
    const QueryOnMaster            = 1219; //
    const ErrorWhenExecutingCommand = 1220; //
    const WrongUsage               = 1221; //
    const WrongNumberOfColumnsInSelect                     = 1222; //
    const CannotUpdateWithReadLock = 1223; //
    const MixingNotAllowed         = 1224; //
    const DuplicateArgument        = 1225; //
    const UserLimitReached         = 1226; //
    const SpecifiedAccessDeniedError = 1227; //
    const LocalVariableError       = 1228; //
    const GlobalVariableError      = 1229; //
    const NotDefaultError          = 1230; //
    const WrongValueForVariable    = 1231; //
    const WrongTypeForVariable     = 1232; //
    const VariableCannotBeRead     = 1233; //
    const CannotUseOptionHere      = 1234; //
    const NotSupportedYet          = 1235; //
    const MasterFatalErrorReadingBinLog                    = 1236; //
    const SlaveIgnoredTable        = 1237; //
    const IncorrectGlobalLocalVariable                     = 1238; //
    const WrongForeignKeyDefinition = 1239; //
    const KeyReferenceDoesNotMatchTableReference           = 1240; //
    const OpearnColumnsError       = 1241; //
    const SubQueryNoOneRow         = 1242; //
    const UnknownStatementHandler  = 1243; //
    const CorruptHelpDatabase      = 1244; //
    const CyclicReference          = 1245; //
    const AutoConvert              = 1246; //
    const IllegalReference         = 1247; //
    const DerivedMustHaveAlias     = 1248; //
    const SelectReduced            = 1249; //
    const TableNameNotAllowedHere  = 1250; //
    const NotSupportedAuthMode     = 1251; //
    const SpatialCannotHaveNull    = 1252; //
    const CollationCharsetMismatch = 1253; //
    const SlaveWasRunning          = 1254; //
    const SlaveWasNotRunning       = 1255; //
    const TooBigForUncompress      = 1256; //
    const ZipLibMemoryError        = 1257; //
    const ZipLibBufferError        = 1258; //
    const ZipLibDataError          = 1259; //
    const CutValueGroupConcat      = 1260; //
    const WarningTooFewRecords     = 1261; //
    const WarningTooManyRecords    = 1262; //
    const WarningNullToNotNull     = 1263; //
    const WarningDataOutOfRange    = 1264; //
    const WaningDataTruncated      = 1265; //
    const WaningUsingOtherHandler  = 1266; //
    const CannotAggregateTwoCollations                     = 1267; //
    const DropUserError            = 1268; //
    const RevokeGrantsError        = 1269; //
    const CannotAggregateThreeCollations                   = 1270; //
    const CannotAggregateNCollations = 1271; //
    const VariableIsNotStructure   = 1272; //
    const UnknownCollation         = 1273; //
    const SlaveIgnoreSSLParameters = 1274; //
    const ServerIsInSecureAuthMode = 1275; //
    const WaningFieldResolved      = 1276; //
    const BadSlaveUntilCondition   = 1277; //
    const MissingSkipSlave         = 1278; //
    const ErrorUntilConditionIgnored = 1279; //
    const WrongNameForIndex        = 1280; //
    const WrongNameForCatalog      = 1281; //
    const WarningQueryCacheResize  = 1282; //
    const BadFullTextColumn        = 1283; //
    const UnknownKeyCache          = 1284; //
    const WarningHostnameWillNotWork = 1285; //
    const UnknownStorageEngine     = 1286; //
    const WaningDeprecatedSyntax   = 1287; //
    const NonUpdateableTable       = 1288; //
    const FeatureDisabled          = 1289; //
    const OptionPreventsStatement  = 1290; //
    const DuplicatedValueInType    = 1291; //
    const TruncatedWrongValue      = 1292; //
    const TooMuchAutoTimestampColumns                      = 1293; //
    const InvalidOnUpdate          = 1294; //
    const UnsupportedPreparedStatement                     = 1295; //
    const GetErroMessage           = 1296; //
    const GetTemporaryErrorMessage = 1297; //
    const UnknownTimeZone          = 1298; //
    const WarningInvalidTimestamp  = 1299; //
    const InvalidCharacterString   = 1300; //
    const WarningAllowedPacketOverflowed                   = 1301; //
    const ConflictingDeclarations  = 1302; //
    const StoredProcedureNoRecursiveCreate                 = 1303; //
    const StoredProcedureAlreadyExists                     = 1304; //
    const StoredProcedureDoesNotExist                      = 1305; //
    const StoredProcedureDropFailed = 1306; //
    const StoredProcedureStoreFailed = 1307; //
    const StoredProcedureLiLabelMismatch                   = 1308; //
    const StoredProcedureLabelRedefine                     = 1309; //
    const StoredProcedureLabelMismatch                     = 1310; //
    const StoredProcedureUninitializedVariable             = 1311; //
    const StoredProcedureBadSelect = 1312; //
    const StoredProcedureBadReturn = 1313; //
    const StoredProcedureBadStatement                      = 1314; //
    const UpdateLogDeprecatedIgnored = 1315; //
    const UpdateLogDeprecatedTranslated                    = 1316; //
    const QueryInterrupted         = 1317; //
    const StoredProcedureNumberOfArguments                 = 1318; //
    const StoredProcedureConditionMismatch                 = 1319; //
    const StoredProcedureNoReturn  = 1320; //
    const StoredProcedureNoReturnEnd = 1321; //
    const StoredProcedureBadCursorQuery                    = 1322; //
    const StoredProcedureBadCursorSelect                   = 1323; //
    const StoredProcedureCursorMismatch                    = 1324; //
    const StoredProcedureAlreadyOpen = 1325; //
    const StoredProcedureCursorNotOpen                     = 1326; //
    const StoredProcedureUndeclaredVariabel                = 1327; //
    const StoredProcedureWrongNumberOfFetchArguments       = 1328; //
    const StoredProcedureFetchNoData = 1329; //
    const StoredProcedureDuplicateParameter                = 1330; //
    const StoredProcedureDuplicateVariable                 = 1331; //
    const StoredProcedureDuplicateCondition                = 1332; //
    const StoredProcedureDuplicateCursor                   = 1333; //
    const StoredProcedureCannotAlter = 1334; //
    const StoredProcedureSubSelectNYI                      = 1335; //
    const StatementNotAllowedInStoredFunctionOrTrigger     = 1336; //
    const StoredProcedureVariableConditionAfterCursorHandler = 1337; //
    const StoredProcedureCursorAfterHandler                = 1338; //
    const StoredProcedureCaseNotFound                      = 1339; //
    const FileParserTooBigFile     = 1340; //
    const FileParserBadHeader      = 1341; //
    const FileParserEOFInComment   = 1342; //
    const FileParserErrorInParameter = 1343; //
    const FileParserEOFInUnknownParameter                  = 1344; //
    const ViewNoExplain            = 1345; //
    const FrmUnknownType           = 1346; //
    const WrongObject              = 1347; //
    const NonUpdateableColumn      = 1348; //
    const ViewSelectDerived        = 1349; //
    const ViewSelectClause         = 1350; //
    const ViewSelectVariable       = 1351; //
    const ViewSelectTempTable      = 1352; //
    const ViewWrongList            = 1353; //
    const WarningViewMerge         = 1354; //
    const WarningViewWithoutKey    = 1355; //
    const ViewInvalid              = 1356; //
    const StoredProcedureNoDropStoredProcedure             = 1357; //
    const StoredProcedureGotoInHandler                     = 1358; //
    const TriggerAlreadyExists     = 1359; //
    const TriggerDoesNotExist      = 1360; //
    const TriggerOnViewOrTempTable = 1361; //
    const TriggerCannotChangeRow   = 1362; //
    const TriggerNoSuchRowInTrigger = 1363; //
    const NoDefaultForField        = 1364; //
    const DivisionByZero           = 1365; //
    const TruncatedWrongValueForField                      = 1366; //
    const IllegalValueForType      = 1367; //
    const ViewNonUpdatableCheck    = 1368; //
    const ViewCheckFailed          = 1369; //
    const PrecedureAccessDenied    = 1370; //
    const RelayLogFail             = 1371; //
    const PasswordLength           = 1372; //
    const UnknownTargetBinLog      = 1373; //
    const IOErrorLogIndexRead      = 1374; //
    const BinLogPurgeProhibited    = 1375; //
    const FSeekFail                = 1376; //
    const BinLogPurgeFatalError    = 1377; //
    const LogInUse                 = 1378; //
    const LogPurgeUnknownError     = 1379; //
    const RelayLogInit             = 1380; //
    const NoBinaryLogging          = 1381; //
    const ReservedSyntax           = 1382; //
    const WSAStartupFailed         = 1383; //
    const DifferentGroupsProcedure = 1384; //
    const NoGroupForProcedure      = 1385; //
    const OrderWithProcedure       = 1386; //
    const LoggingProhibitsChangingOf = 1387; //
    const NoFileMapping            = 1388; //
    const WrongMagic               = 1389; //
    const PreparedStatementManyParameters                  = 1390; //
    const KeyPartZero              = 1391; //
    const ViewChecksum             = 1392; //
    const ViewMultiUpdate          = 1393; //
    const ViewNoInsertFieldList    = 1394; //
    const ViewDeleteMergeView      = 1395; //
    const CannotUser               = 1396; //
    const XAERNotA                 = 1397; //
    const XAERInvalid              = 1398; //
    const XAERRemoveFail           = 1399; //
    const XAEROutside              = 1400; //
    const XAERRemoveError          = 1401; //
    const XARBRollback             = 1402; //
    const NonExistingProcedureGrant = 1403; //
    const ProcedureAutoGrantFail   = 1404; //
    const ProcedureAutoRevokeFail  = 1405; //
    const DataTooLong              = 1406; //
    const StoredProcedureSQLState  = 1407; //
    const StartupError             = 1408; //
    const LoadFromFixedSizeRowsToVariable                  = 1409; //
    const CannotCreateUserWithGrant = 1410; //
    const WrongValueForType        = 1411; //
    const TableDefinitionChanged   = 1412; //
    const StoredProcedureDuplicateHandler                  = 1413; //
    const StoredProcedureNotVariableArgument               = 1414; //
    const StoredProcedureNoReturnSet = 1415; //
    const CannotCreateGeometryObject = 1416; //
    const FailedRoutineBreaksBinLog = 1417; //
    const BinLogUnsafeRoutine      = 1418; //
    const BinLogCreateRoutineNeedSuper                     = 1419; //
    const ExecuteStatementWithOpenCursor                   = 1420; //
    const StatementHasNoOpenCursor = 1421; //
    const CommitNotAllowedIfStoredFunctionOrTrigger        = 1422; //
    const NoDefaultForViewField    = 1423; //
    const StoredProcedureNoRecursion = 1424; //
    const TooBigScale              = 1425; //
    const TooBigPrecision          = 1426; //
    const MBiggerThanD             = 1427; //
    const WrongLockOfSystemTable   = 1428; //
    const ConnectToForeignDataSource = 1429; //
    const QueryOnForeignDataSource = 1430; //
    const ForeignDataSourceDoesNotExist                    = 1431; //
    const ForeignDataStringInvalidCannotCreate             = 1432; //
    const ForeignDataStringInvalid = 1433; //
    const CannotCreateFederatedTable = 1434; //
    const TriggerInWrongSchema     = 1435; //
    const StackOverrunNeedMore     = 1436; //
    const TooLongBody              = 1437; //
    const WarningCannotDropDefaultKeyCache                 = 1438; //
    const TooBigDisplayWidth       = 1439; //
    const XAERDuplicateID          = 1440; //
    const DateTimeFunctionOverflow = 1441; //
    const CannotUpdateUsedTableInStoredFunctionOrTrigger   = 1442; //
    const ViewPreventUpdate        = 1443; //
    const PreparedStatementNoRecursion                     = 1444; //
    const StoredProcedureCannotSetAutoCommit               = 1445; //
    const MalformedDefiner         = 1446; //
    const ViewFrmNoUser            = 1447; //
    const ViewOtherUser            = 1448; //
    const NoSuchUser               = 1449; //
    const ForbidSchemaChange       = 1450; //
    const RowIsReferenced2         = 1451; //
    const NoReferencedRow2         = 1452; //
    const StoredProcedureBadVariableShadow                 = 1453; //
    const TriggerNoDefiner         = 1454; //
    const OldFileFormat            = 1455; //
    const StoredProcedureRecursionLimit                    = 1456; //
    const StoredProcedureTableCorrupt                      = 1457; //
    const StoredProcedureWrongName = 1458; //
    const TableNeedsUpgrade        = 1459; //
    const StoredProcedureNoAggregate = 1460; //
    const MaxPreparedStatementCountReached                 = 1461; //
    const ViewRecursive            = 1462; //
    const NonGroupingFieldUsed     = 1463; //
    const TableCannotHandleSpatialKeys                     = 1464; //
    const NoTriggersOnSystemSchema = 1465; //
    const RemovedSpaces            = 1466; //
    const AutoIncrementReadFailed  = 1467; //
    const UserNameError            = 1468; //
    const HostNameError            = 1469; //
    const WrongStringLength        = 1470; //
    const NonInsertableTable       = 1471; //
    const AdminWrongMergeTable     = 1472; //
    const TooHighLevelOfNestingForSelect                   = 1473; //
    const NameBecomesEmpty         = 1474; //
    const AmbiguousFieldTerm       = 1475; //
    const ForeignServerExists      = 1476; //
    const ForeignServerDoesNotExist = 1477; //
    const IllegalHACreateOption    = 1478; //
    const PartitionRequiresValues  = 1479; //
    const PartitionWrongValues     = 1480; //
    const PartitionMaxValue        = 1481; //
    const PartitionSubPartition    = 1482; //
    const PartitionSubPartMix      = 1483; //
    const PartitionWrongNoPart     = 1484; //
    const PartitionWrongNoSubPart  = 1485; //
    const WrongExpressionInParitionFunction                = 1486; //
    const NoConstantExpressionInRangeOrListError           = 1487; //
    const FieldNotFoundPartitionErrror                     = 1488; //
    const ListOfFieldsOnlyInHash   = 1489; //
    const InconsistentPartitionInfo = 1490; //
    const PartitionFunctionNotAllowed                      = 1491; //
    const PartitionsMustBeDefined  = 1492; //
    const RangeNotIncreasing       = 1493; //
    const InconsistentTypeOfFunctions                      = 1494; //
    const MultipleDefinitionsConstantInListPartition       = 1495; //
    const PartitionEntryError      = 1496; //
    const MixHandlerError          = 1497; //
    const PartitionNotDefined      = 1498; //
    const TooManyPartitions        = 1499; //
    const SubPartitionError        = 1500; //
    const CannotCreateHandlerFile  = 1501; //
    const BlobFieldInPartitionFunction = 1502; //
    const UniqueKeyNeedAllFieldsInPartitioningFunction = 1503; //
    const NoPartitions             = 1504; //
    const PartitionManagementOnNoPartitioned = 1505; //
    const ForeignKeyOnPartitioned  = 1506; //
    const DropPartitionNonExistent = 1507; //
    const DropLastPartition        = 1508; //
    const CoalesceOnlyOnHashPartition = 1509; //
    const ReorganizeHashOnlyOnSameNumber = 1510; //
    const ReorganizeNoParameter    = 1511; //
    const OnlyOnRangeListPartition = 1512; //
    const AddPartitionSubPartition = 1513; //
    const AddPartitionNoNewPartition = 1514; //
    const CoalescePartitionNoPartition = 1515; //
    const ReorganizePartitionNotExist = 1516; //
    const SameNamePartition        = 1517; //
    const NoBinLog                 = 1518; //
    const ConsecutiveReorganizePartitions = 1519; //
    const ReorganizeOutsideRange   = 1520; //
    const PartitionFunctionFailure = 1521; //
    const PartitionStateError      = 1522; //
    const LimitedPartitionRange    = 1523; //
    const PluginIsNotLoaded        = 1524; //
    const WrongValue               = 1525; //
    const NoPartitionForGivenValue = 1526; //
    const FileGroupOptionOnlyOnce  = 1527; //
    const CreateFileGroupFailed    = 1528; //
    const DropFileGroupFailed      = 1529; //
    const TableSpaceAutoExtend     = 1530; //
    const WrongSizeNumber          = 1531; //
    const SizeOverflow             = 1532; //
    const AlterFileGroupFailed     = 1533; //
    const BinLogRowLogginFailed    = 1534; //
    const BinLogRowWrongTableDefinition = 1535; //
    const BinLogRowRBRToSBR        = 1536; //
    const EventAlreadyExists       = 1537; //
    const EventStoreFailed         = 1538; //
    const EventDoesNotExist        = 1539; //
    const EventCannotAlter         = 1540; //
    const EventDropFailed          = 1541; //
    const EventIntervalNotPositiveOrTooBig = 1542; //
    const EventEndsBeforeStarts    = 1543; //
    const EventExecTimeInThePast   = 1544; //
    const EventOpenTableFailed     = 1545; //
    const EventNeitherMExpresssionNorMAt = 1546; //
    const ColumnCountDoesNotMatchCorrupted = 1547; //
    const CannotLoadFromTable      = 1548; //
    const EventCannotDelete        = 1549; //
    const EventCompileError        = 1550; //
    const EventSameName            = 1551; //
    const EventDataTooLong         = 1552; //
    const DropIndexForeignKey      = 1553; //
    const WarningDeprecatedSyntaxWithVersion = 1554; //
    const CannotWriteLockLogTable  = 1555; //
    const CannotLockLogTable       = 1556; //
    const ForeignDuplicateKey      = 1557; //
    const ColumnCountDoesNotMatchPleaseUpdate      = 1558; //
    const TemoraryTablePreventSwitchOutOfRBR       = 1559; //
    const StoredFunctionPreventsSwitchBinLogFormat = 1560; //
    const NDBCannotSwitchBinLogFormat = 1561; //
    const PartitionNoTemporary     = 1562; //
    const PartitionConstantDomain  = 1563; //
    const PartitionFunctionIsNotAllowed = 1564; //
    const DDLLogError              = 1565; //
    const NullInValuesLessThan     = 1566; //
    const WrongPartitionName       = 1567; //
    const CannotChangeTransactionIsolation                 = 1568; //
    const DuplicateEntryAutoIncrementCase                  = 1569; //
    const EventModifyQueueError    = 1570; //
    const EventSetVariableError    = 1571; //
    const PartitionMergeError      = 1572; //
    const CannotActivateLog        = 1573; //
    const RBRNotAvailable          = 1574; //
    const Base = 64; //DecodeError       1575
    const EventRecursionForbidden  = 1576; //
    const EventsDatabaseError      = 1577; //
    const OnlyIntegersAllowed      = 1578; //
    const UnsupportedLogEngine     = 1579; //
    const BadLogStatement          = 1580; //
    const CannotRenameLogTable     = 1581; //
    const WrongParameterCountToNativeFCT = 1582; //
    const WrongParametersToNativeFCT = 1583; //
    const WrongParametersToStoredFCT = 1584; //
    const NativeFCTNameCollision   = 1585; //
    const DuplicateEntryWithKeyName = 1586; //
    const BinLogPurgeEMFile        = 1587; //
    const EventCannotCreateInThePast = 1588; //
    const EventCannotAlterInThePast = 1589; //
    const SlaveIncident            = 1590; //
    const NoPartitionForGivenValueSilent                   = 1591; //
    const BinLogUnsafeStatement    = 1592; //
    const SlaveFatalError          = 1593; //
    const SlaveRelayLogReadFailure = 1594; //
    const SlaveRelayLogWriteFailure = 1595; //
    const SlaveCreateEventFailure  = 1596; //
    const SlaveMasterComFailure    = 1597; //
    const BinLogLoggingImpossible  = 1598; //
    const ViewNoCreationContext    = 1599; //
    const ViewInvalidCreationContext = 1600; //
    const StoredRoutineInvalidCreateionContext             = 1601; //
    const TiggerCorruptedFile      = 1602; //
    const TriggerNoCreationContext = 1603; //
    const TriggerInvalidCreationContext                    = 1604; //
    const EventInvalidCreationContext                      = 1605; //
    const TriggerCannotOpenTable   = 1606; //
    const CannoCreateSubRoutine    = 1607; //
    const SlaveAmbiguousExecMode   = 1608; //
    const NoFormatDescriptionEventBeforeBinLogStatement    = 1609; //
    const SlaveCorruptEvent        = 1610; //
    const LoadDataInvalidColumn    = 1611; //
    const LogPurgeNoFile           = 1612; //
    const XARBTimeout              = 1613; //
    const XARBDeadlock             = 1614; //
    const NeedRePrepare            = 1615; //
    const DelayedNotSupported      = 1616; //
    const WarningNoMasterInfo      = 1617; //
    const WarningOptionIgnored     = 1618; //
    const WarningPluginDeleteBuiltIn = 1619; //
    const WarningPluginBusy        = 1620; //
    const VariableIsReadonly       = 1621; //
    const WarningEngineTransactionRollback                 = 1622; //
    const SlaveHeartbeatFailure    = 1623; //
    const SlaveHeartbeatValueOutOfRange                    = 1624; //
    const NDBReplicationSchemaError = 1625; //
    const ConflictFunctionParseError = 1626; //
    const ExcepionsWriteError      = 1627; //
    const TooLongTableComment      = 1628; //
    const TooLongFieldComment      = 1629; //
    const FunctionInExistentNameCollision                  = 1630; //
    const DatabaseNameError        = 1631; //
    const TableNameErrror          = 1632; //
    const PartitionNameError       = 1633; //
    const SubPartitionNameError    = 1634; //
    const TemporaryNameError       = 1635; //
    const RenamedNameError         = 1636; //
    const TooManyConcurrentTransactions                    = 1637; //
    const WarningNonASCIISeparatorNotImplemented           = 1638; //
    const DebugSyncTimeout         = 1639; //
    const DebugSyncHitLimit        = 1640; //
}


# vim: set tabstop=4 shiftwidth=4 :
# Local Variables:
# tab-width: 4
# end:
